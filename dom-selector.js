// Generated by CoffeeScript 1.6.2
(function() {
  var __slice = [].slice;

  (function($) {
    var cancel, disable, enable, firstChild, getSelector, hideOverlay, hovered, keyMap, log, nextSibling, notEmpty, onClick, onKeyDown, onKeyUp, onMouseMove, overlay, prevSibling, selectElement, setOverlayText, showOverlay, waiting;

    log = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.unshift("dom-selector:");
      return console.log.apply(console, args);
    };
    log("Loading...");
    waiting = null;
    overlay = $("<div id='dom-selector-overlay' style='display:none'>Overlay</div>");
    $(document).ready(function() {
      return overlay.appendTo("body");
    });
    showOverlay = function(x, y, w, h) {
      return overlay.css({
        position: "fixed",
        top: parseInt(y) + "px",
        left: parseInt(x) + "px",
        width: parseInt(w) + "px",
        height: parseInt(h) + "px",
        background: "#ffc",
        "border-radius": "5px",
        "text-align": "center",
        "z-index": 9999,
        display: "block"
      });
    };
    hideOverlay = function() {
      return overlay.css({
        display: "none"
      });
    };
    setOverlayText = function(message) {
      return $("div#dom-selector-overlay").text(message);
    };
    notEmpty = function(i, s) {
      return (s != null ? s.length : void 0) > 0;
    };
    getSelector = (function() {
      var nthChild;

      nthChild = function(elem) {
        var i, parent, _i, _ref;

        if (((elem == null) || (elem.ownerDocument == null), elem === document || elem === document.body || elem === document.head)) {
          return "";
        }
        if (parent = elem != null ? elem.parentNode : void 0) {
          for (i = _i = 0, _ref = parent.childNodes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (parent.childNodes[i] === elem) {
              return ":nth-child(" + i + ")";
            }
          }
        }
        return "";
      };
      return function(element) {
        var hasClass, hasId, hasParent, isElement, isRoot, s;

        hasId = notEmpty(0, element.id);
        hasClass = notEmpty(0, element.className);
        isElement = element.nodeType === 1;
        isRoot = element.parentNode === element.ownerDocument;
        hasParent = element.parentNode != null;
        s = (function() {
          switch (true) {
            case isRoot:
              return "";
            case !isElement:
              return "";
            case hasId:
              return "#" + element.id;
            case hasClass:
              return "." + element.className.split(" ").join(".");
            default:
              return element.nodeName.toLowerCase() + nthChild(element);
          }
        })();
        if (hasId) {
          return s;
        }
        if (hasParent) {
          return getSelector(element.parentNode) + " > " + s;
        }
        return s;
      };
    })();
    hovered = {
      element: null,
      background: "",
      unhighlight: function() {
        if (this.element != null) {
          this.element.css("background", this.background);
        }
        return this.element = null;
      },
      highlight: function() {
        if (this.element != null) {
          this.background = this.element.css("background");
          return this.element.css({
            background: "rgba(255,0,0,.5)"
          });
        }
      },
      update: function(target) {
        var _ref;

        if ((target == null) || (target === ((_ref = this.element) != null ? _ref[0] : void 0)) || (target === overlay[0])) {
          return;
        }
        this.unhighlight();
        this.element = $(target);
        this.highlight();
        return setOverlayText(getSelector(target));
      }
    };
    keyMap = {
      13: "enter",
      37: "left",
      38: "up",
      39: "right",
      40: "down"
    };
    cancel = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.cancelBubble = true;
      return false;
    };
    firstChild = function(elem) {
      var child;

      child = elem.childNodes[0];
      while ((child != null) && child.nodeType !== 1) {
        child = child.nextSibling;
      }
      return child;
    };
    nextSibling = function(elem) {
      var next;

      next = elem.nextSibling;
      while ((next != null) && next.nodeType !== 1) {
        next = next.nextSibling;
      }
      return next;
    };
    prevSibling = function(elem) {
      var previous;

      previous = elem.previousSibling;
      while ((previous != null) && previous.nodeType !== 1) {
        previous = previous.previousSibling;
      }
      return previous;
    };
    onMouseMove = function(event) {
      return hovered.update(event.target);
    };
    onKeyUp = function(event) {
      var element, _ref;

      element = (_ref = hovered.element) != null ? _ref[0] : void 0;
      if (element == null) {
        return;
      }
      hovered.update((function() {
        switch (keyMap[event.keyCode]) {
          case "left":
            return element.parentNode;
          case "right":
            return firstChild(element);
          case "down":
            return nextSibling(element);
          case "up":
            return prevSibling(element);
          case "enter":
            return onClick(event);
          default:
            return null;
        }
      })());
      if (event.keyCode in keyMap) {
        return cancel(event);
      }
    };
    onKeyDown = function(event) {
      switch (keyMap[event.keyCode]) {
        case "left":
        case "right":
        case "up":
        case "down":
          return cancel(event);
        default:
          return true;
      }
    };
    onClick = function(event) {
      if (typeof waiting === "function") {
        waiting(hovered.element);
      }
      return cancel(event);
    };
    enable = function() {
      showOverlay(10, 10, 400, 60);
      log("Binding events");
      return $(document.body).mousemove(onMouseMove).keyup(onKeyUp).keydown(onKeyDown).click(onClick);
    };
    disable = function() {
      log("Unbinding events");
      hideOverlay();
      hovered.unhighlight();
      return $(document.body).unbind("mousemove", onMouseMove).unbind("click", onClick).unbind("keyup", onKeyUp).unbind("keydown", onKeyDown);
    };
    selectElement = function(cb) {
      waiting = function(selected) {
        disable();
        return typeof cb === "function" ? cb(selected[0], getSelector(selected[0])) : void 0;
      };
      return enable();
    };
    return $.extend(jQuery, {
      selectElement: selectElement,
      getSelector: getSelector
    });
  })(window.jQuery);

}).call(this);

/*
//@ sourceMappingURL=dom-selector.map
*/
